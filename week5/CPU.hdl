// * 조합칩은 맘대로 쓸 수 있다는 사실..
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // jmpFlag
        // jmpAddress[0]=
        // jmpAddress[1..15]=
        Or(a=instruction[15], b=true, out=isAInstruction);
        Not(in=isAInstruction, out=isCInstruction, out=isEInstruction);

        // a
        // c[0..5]
        // d[0..2]
        // j[0..2]
        Jumper(in=aluResult, j=instruction[0..2], jmpFlag=jmpFlag);

        // AInstructionParser

        // CInstructionParser

        // aRegister
        // ARegister(in=, load=isAInstruction, out=a_register_out);

        // // dRegister
        // DRegister(in=, load=, out=d_register_out);

        // // A/M Selector
        // Mux16(a=a_register_out, b=inM, sel=sel_a_or_m, out=a_m_register_out);
        
        //zx=, nx=, zy=, ny=, f=, no=, zr=, ng=
        // x=dRegisterOut, y=AMRegisterOut
        ALU(out=aluResult);

        Not(in=jmpFlag, out=notJmpFlag);
        // how to fetch jmpAddress.
        // in=jmpAddress, 
        PC(load=jmpFlag, inc=notJmpFlag, reset=reset, out[1..15]=pc);
}