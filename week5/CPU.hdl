// * 조합칩은 맘대로 쓸 수 있다는 사실..
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Or(a=instruction[15], b=false, out=isCInstruction);
        Not(in=isCInstruction, out=isAInstruction);
        
        // TODO: prevent to execute when isAInstruction. below instruction parser executes only when isCInstruction.
        Or16(a[0..2]=instruction[3..5], b=false, out[0..2]=dBits); // dBits Count = 3
        Or16(a[0..5]=instruction[6..11], b=false, out[0..5]=cBits); // cBits Count = 6
        Or(a=instruction[12], b=false, out=aBit); // aBit Count = 1

        WhereToSave(d=dBits, flag=isCInstruction, saveA=saveA, saveD=saveD, saveM=saveM);

        Jumper(in=aluResult, j=instruction[0..2], jmpFlag=tempJmpFlag);

        Mux16(a[0..14]=instruction[0..14], a[15]=false, b=aluResult, sel=isCInstruction, out=aluResultOrValue);
        Or(a=isAInstruction, b=saveA, out=isAInstructionOrSaveA);
        ARegister(in=aluResultOrValue, load=isAInstructionOrSaveA, out=ARegisterOut);

        DRegister(in=aluResult, load=saveD, out=DRegisterOut);

        Mux16(a=ARegisterOut, b=inM, sel=aBit, out=ARegisterOutOrInM); // aBit=0, sel a(ARegisterOut); aBit=1, sel m(inM[16]);
        ALU(x=DRegisterOut, y=ARegisterOutOrInM, no=instruction[6], f=instruction[7], ny=instruction[8], zy=instruction[9], nx=instruction[10], zx=instruction[11], out=aluResult);

        
        And(a=isCInstruction, b=tempJmpFlag, out=jmpFlag); // ! last Bug. relate with TODO
        Not(in=jmpFlag, out=notJmpFlag);
        Or(a=isAInstruction, b=notJmpFlag, out=incFlag); // ! also reliate with TODO
        PC(in=ARegisterOut, load=jmpFlag, inc=incFlag, reset=reset, out[0..14]=pc); // ! out[1..15] 멍청

        Or(a=saveM, b=false, out=writeM);
        Or16(a=aluResult, b=false, out=outM);
        Or16(a=ARegisterOut, b=false, out[0..14]=addressM);
}