// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
        // AddrAccessor(in=address, out=addr);

        // And(a=addr[0], b=load, out=load0);
        // And(a=addr[1], b=load, out=load1);
        // And(a=addr[2], b=load, out=load2);
        // And(a=addr[3], b=load, out=load3);
        // And(a=addr[4], b=load, out=load4);
        // And(a=addr[5], b=load, out=load5);
        // And(a=addr[6], b=load, out=load6);
        // And(a=addr[7], b=load, out=load7);

        AddrAccessor8bit(in=address, a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);

        And(a=a, b=load, out=load0);
        And(a=b, b=load, out=load1);
        And(a=c, b=load, out=load2);
        And(a=d, b=load, out=load3);
        And(a=e, b=load, out=load4);
        And(a=f, b=load, out=load5);
        And(a=g, b=load, out=load6);
        And(a=h, b=load, out=load7);

        Register(in=in, load=load0, out=reg0);
        Register(in=in, load=load1, out=reg1);
        Register(in=in, load=load2, out=reg2);
        Register(in=in, load=load3, out=reg3);
        Register(in=in, load=load4, out=reg4);
        Register(in=in, load=load5, out=reg5);
        Register(in=in, load=load6, out=reg6);
        Register(in=in, load=load7, out=reg7);

        Mux8Way16(a=reg0, b=reg1, c=reg2, d=reg3, e=reg4, f=reg5, g=reg6, h=reg7, sel=address, out=out);
}